/*

The MIT License (MIT)

Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// compute RHS = MM*RHS/nu + BCdata
// and split fields to separate arrays
@kernel void insVelocityRhsTet3D(const dlong Nelements,
                               @restrict const  dfloat *  vgeo,
                               @restrict const  dfloat *  sgeo,
                               @restrict const  dfloat *  Dmatrices,
                               @restrict const  dfloat *  LIFTT,
                               @restrict const  dfloat *  MM,
                               @restrict const  dlong  *  vmapM,
                               @restrict const  int    *  EToB,
                               const dfloat tau,
                               const dfloat time,
                               @restrict const  dfloat *  x,
                               @restrict const  dfloat *  y,
                               @restrict const  dfloat *  z,
                               const dfloat nu,
                               @restrict const dfloat *  U,
                               @restrict const dfloat *  RHS,
                               @restrict       dfloat *  UH,
                               @restrict       dfloat *  VH,
                               @restrict       dfloat *  WH,
                               @restrict       dfloat *  rhsU,
                               @restrict       dfloat *  rhsV,
                               @restrict       dfloat *  rhsW){

  for(dlong e=0;e<Nelements;++e;@outer(0)){
    @shared  dfloat s_dqdx[p_Np];
    @shared  dfloat s_dqdy[p_Np];
    @shared  dfloat s_dqdz[p_Np];

    @shared  dfloat s_laps[p_Np];

    @shared  dfloat s_nxdq[p_NfacesNfp];
    @shared  dfloat s_nydq[p_NfacesNfp];
    @shared  dfloat s_nzdq[p_NfacesNfp];

    @shared  dfloat s_dq[p_NVfields][p_NfacesNfp];
    @shared  dfloat s_lapsflux[p_NVfields][p_NfacesNfp];

    @shared  dfloat s_Lnxdq[p_Np];
    @shared  dfloat s_Lnydq[p_Np];
    @shared  dfloat s_Lnzdq[p_Np];

    @exclusive dlong idM;
    @exclusive dfloat nx, ny, nz, sJ, invJ, hinv;

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_NfacesNfp){
        const dlong id  = n + e*p_Nfaces*p_Nfp;
        idM = vmapM[id];

        const int face = n/p_Nfp;
        dfloat dudxP=0.f, dudyP=0.f, dudzP=0.f, uP=0.f;
        dfloat dvdxP=0.f, dvdyP=0.f, dvdzP=0.f, vP=0.f;
        dfloat dwdxP=0.f, dwdyP=0.f, dwdzP=0.f, wP=0.f;

        // load surface geofactors for this face
        const dlong sid = p_Nsgeo*(e*p_Nfaces+face);
        nx    = sgeo[sid+p_NXID];
        ny    = sgeo[sid+p_NYID];
        nz    = sgeo[sid+p_NZID];
        sJ    = sgeo[sid+p_SJID];
        invJ  = sgeo[sid+p_IJID];
        hinv  = sgeo[sid+p_IHID];

        const int bc = EToB[face+p_Nfaces*e];
        if(bc>0) {
          insVelocityDirichletConditions3D(bc, nu, time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f, 0.f, &uP, &vP, &wP);
          insVelocityNeumannConditions3D(bc, nu, time, x[idM], y[idM], z[idM], nx, ny, nz, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, 0.f, &dudxP,&dudyP,&dudzP, &dvdxP,&dvdyP,&dvdzP, &dwdxP,&dwdyP,&dwdzP);
        }

        const dfloat du = uP;
        const dfloat dv = vP;
        const dfloat dw = wP;

        s_dq[0][n] = sJ*invJ*du;
        s_dq[1][n] = sJ*invJ*dv;
        s_dq[2][n] = sJ*invJ*dw;

        s_lapsflux[0][n] = sJ*invJ*(-nx*(dudxP)-ny*(dudyP)-nz*(dudzP) -tau*hinv*du);
        s_lapsflux[1][n] = sJ*invJ*(-nx*(dvdxP)-ny*(dvdyP)-nz*(dvdzP) -tau*hinv*dv);
        s_lapsflux[2][n] = sJ*invJ*(-nx*(dwdxP)-ny*(dwdyP)-nz*(dwdzP) -tau*hinv*dw);
      }
    }

    for (int fld=0;fld<p_NVfields;fld++) {
      @barrier("local");

      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        if(n<p_NfacesNfp){
          s_nxdq[n] = nx*s_dq[fld][n];
          s_nydq[n] = ny*s_dq[fld][n];
          s_nzdq[n] = nz*s_dq[fld][n];
        }
      }

      @barrier("local");

      // dqdx += LIFT*(sJ/J)*nx*dq
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        if(n<p_Np){
          const dlong gid = e*p_Nvgeo;
          const dfloat drdx = vgeo[gid + p_RXID];
          const dfloat drdy = vgeo[gid + p_RYID];
          const dfloat drdz = vgeo[gid + p_RZID];

          const dfloat dsdx = vgeo[gid + p_SXID];
          const dfloat dsdy = vgeo[gid + p_SYID];
          const dfloat dsdz = vgeo[gid + p_SZID];

          const dfloat dtdx = vgeo[gid + p_TXID];
          const dfloat dtdy = vgeo[gid + p_TYID];
          const dfloat dtdz = vgeo[gid + p_TZID];

          dfloat Lnxdq = 0.f;
          dfloat Lnydq = 0.f;
          dfloat Lnzdq = 0.f;

          #pragma unroll p_NfacesNfp
            for(int i=0;i<p_NfacesNfp;++i){
              dfloat liftt = LIFTT[n+i*p_Np];
              Lnxdq += liftt*s_nxdq[i];
              Lnydq += liftt*s_nydq[i];
              Lnzdq += liftt*s_nzdq[i];
            }

          const dfloat dqdx = Lnxdq;
          const dfloat dqdy = Lnydq;
          const dfloat dqdz = Lnzdq;

          s_dqdx[n] = drdx*dqdx + drdy*dqdy + drdz*dqdz; // abuse of notation
          s_dqdy[n] = dsdx*dqdx + dsdy*dqdy + dsdz*dqdz;
          s_dqdz[n] = dtdx*dqdx + dtdy*dqdy + dtdz*dqdz;

          s_Lnxdq[n] = Lnxdq;
          s_Lnydq[n] = Lnydq;
          s_Lnzdq[n] = Lnzdq;

        }
      }

      @barrier("local");

      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        if(n<p_NfacesNfp){
          const int id = idM%p_Np;
          s_lapsflux[fld][n] += sJ*invJ*(nx*s_Lnxdq[id]+ny*s_Lnydq[id]+nz*s_Lnzdq[id]);
        }

        if(n<p_Np){
          dfloat lasr = 0.f, lass = 0.f, last=0.f;
          #pragma unroll p_Np
          for(int i=0;i<p_Np;++i) {
            const dfloat Drn = Dmatrices[n+i*p_Np+0*p_Np*p_Np];
            const dfloat Dsn = Dmatrices[n+i*p_Np+1*p_Np*p_Np];
            const dfloat Dtn = Dmatrices[n+i*p_Np+2*p_Np*p_Np];
            lasr += Drn*s_dqdx[i];
            lass += Dsn*s_dqdy[i];
            last += Dtn*s_dqdz[i];
          }

          //fetch rhs value and add volume terms
          const dlong id = e*p_Np*p_NVfields+n;
          s_laps[n] = RHS[id+fld*p_Np]/nu +(lasr+lass+last);
        }
      }

      @barrier("local");

      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        if(n<p_Np){
          dfloat las = 0.f;

          // lift remaining surface terms
          #pragma unroll p_NfacesNfp
            for(int i=0;i<p_NfacesNfp;++i){
              las += LIFTT[n+i*p_Np]*s_lapsflux[fld][i];
            }

          s_laps[n] -= las;
        }
      }

      @barrier("local");

      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        if(n<p_Np){
          const dfloat J = vgeo[e*p_Nvgeo + p_JID];

          dfloat Mlaps = 0.f;

          // multiply by mass matrix
          #pragma unroll p_Np
          for(int i=0;i<p_Np;++i){
            Mlaps += MM[n+i*p_Np]*s_laps[i];
          }

          const dlong iid = e*p_Np*p_NVfields+n;
          const dlong id = e*p_Np+n;
          switch(fld) {
            case (0):
              UH[id] = U[iid+0*p_Np];
              rhsU[id] = J*Mlaps;
              break;
            case (1):
              VH[id] = U[iid+1*p_Np];
              rhsV[id] = J*Mlaps;
              break;
            case (2):
              WH[id] = U[iid+2*p_Np];
              rhsW[id] = J*Mlaps;
              break;
          }
        }
      }
    }
  }
}

// merge arrays back, and enter BCs if C0
@kernel void insVelocityBCTet3D(const dlong Nelements,
                               @restrict const  dfloat *  sgeo,
                               @restrict const  dlong  *  vmapM,
                               @restrict const  int    *  mapB,
                               const dfloat time,
                               @restrict const  dfloat *  x,
                               @restrict const  dfloat *  y,
                               @restrict const  dfloat *  z,
                               const dfloat nu,
                               const int vDisc_c0,
                               @restrict        dfloat *  UH,
                               @restrict        dfloat *  VH,
                               @restrict        dfloat *  WH,
                               @restrict        dfloat *  U){

  for(dlong e=0;e<Nelements;e++;@outer(0)){

    if (vDisc_c0) { //fill masked boundary points if C0
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
        if(n<p_NfacesNfp){
          const dlong idM = vmapM[e*p_Nfp*p_Nfaces + n];
          const int bc = mapB[idM];

          if(bc>0) {
            const dfloat uM = UH[idM];
            const dfloat vM = VH[idM];
            const dfloat wM = WH[idM];

            const int face = n/p_Nfp;
            const dlong sid = p_Nsgeo*(e*p_Nfaces+face);
            const dfloat nx = sgeo[sid+p_NXID];
            const dfloat ny = sgeo[sid+p_NYID];
            const dfloat nz = sgeo[sid+p_NZID];

            dfloat uP = 0.f;
            dfloat vP = 0.f;
            dfloat wP = 0.f;
            insVelocityDirichletConditions3D(bc, nu, time, x[idM], y[idM], z[idM], nx, ny, nz, uM, vM, wM, &uP, &vP, &wP);
            UH[idM] = uP;
            VH[idM] = vP;
            WH[idM] = wP;
          }
        }
      }
      @barrier("local");
    }

    for(int n=0;n<p_maxNodes;++n;@inner(0)){
      if(n<p_Np){
        const dlong id = e*p_Np+n;
        const dlong iid = e*p_Np*p_NVfields+n;
        U[iid+0*p_Np] = UH[id];
        U[iid+1*p_Np] = VH[id];
        U[iid+2*p_Np] = WH[id];
      }
    }
  }
}
